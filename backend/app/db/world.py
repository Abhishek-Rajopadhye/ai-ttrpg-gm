from pydantic import BaseModel, Field
from typing import Optional, List

class World(BaseModel):
    """
    Pydantic model for a World.
    Represents a game world created by a user.
    """
    id: Optional[str] = Field(None, description="Unique identifier for the world (generated by database)")
    user_id: str = Field(..., description="ID of the user who owns this world")
    name: str = Field(..., description="Name of the world")
    description: Optional[str] = Field(None, description="Description of the world")
    lore: Optional[str] = Field(None, description="Detailed lore or background information")
    # Add other world-specific fields like maps, factions, etc.

    class Config:
        orm_mode = True

class WorldCreate(BaseModel):
    """
    Pydantic model for creating a new World.
    Excludes the ID as it's generated by the database.
    """
    name: str = Field(..., description="Name of the world")
    description: Optional[str] = Field(None, description="Description of the world")
    lore: Optional[str] = Field(None, description="Detailed lore or background information")

class WorldUpdate(BaseModel):
    """
    Pydantic model for updating an existing World.
    All fields are optional as any of them can be updated.
    """
    name: Optional[str] = Field(None, description="New name for the world")
    description: Optional[str] = Field(None, description="New description for the world")
    lore: Optional[str] = Field(None, description="New detailed lore or background information")

