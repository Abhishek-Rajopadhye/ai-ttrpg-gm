from pydantic import BaseModel, Field
from typing import Optional, List

class Item(BaseModel):
    """
    Pydantic model for an Item.
    Represents an in-game item. Can be part of a World or used in a Campaign.
    """
    id: Optional[str] = Field(None, description="Unique identifier for the item (generated by database)")
    user_id: str = Field(..., description="ID of the user who owns this item")
    world_id: Optional[str] = Field(None, description="Optional ID of the world this item belongs to")
    name: str = Field(..., description="Name of the item")
    description: Optional[str] = Field(None, description="Description of the item")
    properties: Optional[dict] = Field(None, description="JSON field for item properties (e.g., +1 damage, healing)")
    # Add other item-specific fields

    class Config:
        orm_mode = True

class ItemCreate(BaseModel):
    """
    Pydantic model for creating a new Item.
    Excludes the ID.
    """
    world_id: Optional[str] = Field(None, description="Optional ID of the world this item belongs to")
    name: str = Field(..., description="Name of the item")
    description: Optional[str] = Field(None, description="Description of the item")
    properties: Optional[dict] = Field(None, description="JSON field for item properties")

class ItemUpdate(BaseModel):
    """
    Pydantic model for updating an existing Item.
    All fields are optional.
    """
    world_id: Optional[str] = Field(None, description="Optional ID of the world this item belongs to")
    name: Optional[str] = Field(None, description="New name for the item")
    description: Optional[str] = Field(None, description="New description for the item")
    properties: Optional[dict] = Field(None, description="New JSON field for item properties")

